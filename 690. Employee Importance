https://leetcode.com/problems/employee-importance/
/*
// Employee info
class Employee {
public:
    // It's the unique ID of each node.
    // unique id of this employee
    int id;
    // the importance value of this employee
    int importance;
    // the id of direct subordinates
    vector<int> subordinates;
};
*/
class Solution {
public:

    void dfs(vector<Employee*> employees, int &id, int& cnt, vector<int>&p){
        for(int i = 0; i < employees.size(); i++)
            if(employees[i]->id == id){
                cnt += employees[i]->importance;
                p = employees[i]->subordinates;
                break;
            }
        for(int i = 0; i < employees.size(); i++){
            if(binary_search(p.begin(), p.end(), employees[i]->id)){
                //cnt += employees[i]->importance;
                vector<int>p1;
                dfs(employees, employees[i]->id, cnt, p1);
            }
        }
    }
    
    
    int getImportance(vector<Employee*> employees, int id) {
        int cnt = 0;
        vector<int>p;

        dfs(employees, id, cnt, p);
        return cnt;
    }
};
